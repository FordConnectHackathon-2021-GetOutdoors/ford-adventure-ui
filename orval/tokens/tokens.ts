/*
 * Generated by orval v5.4.14 üç∫
 * Do not edit manually.
 * FordConnect Prod Collection V3.1.2
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  Post914d88b135234bf69be41b96b4f6f919Oauth2V20TokenParams
} from '.././model'

type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


export const post914d88b135234bf69be41b96b4f6f919Oauth2V20Token = <TData = AxiosResponse<unknown>>(
    params?: Post914d88b135234bf69be41b96b4f6f919Oauth2V20TokenParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/914d88b1-3523-4bf6-9be4-1b96b4f6f919/oauth2/v2.0/token`,
      undefined,
      {
        params,
    ...options },
    );
  }



    export const usePost914d88b135234bf69be41b96b4f6f919Oauth2V20Token = <TData = AsyncReturnType<typeof post914d88b135234bf69be41b96b4f6f919Oauth2V20Token,AxiosResponse<unknown>>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params?: Post914d88b135234bf69be41b96b4f6f919Oauth2V20TokenParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<TData, TError, {params?: Post914d88b135234bf69be41b96b4f6f919Oauth2V20TokenParams}, TContext>((props) => {
        const {params} = props || {};

        return  post914d88b135234bf69be41b96b4f6f919Oauth2V20Token<TData>(params,axiosOptions)
      }, mutationOptions)
    }
    export const getApiFordconnectVehiclesV1 = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/fordconnect/vehicles/v1`,options
    );
  }


export const getGetApiFordconnectVehiclesV1QueryKey = () => [`/api/fordconnect/vehicles/v1`]

    
export const useGetApiFordconnectVehiclesV1 = <TQueryFnData = AsyncReturnType<typeof getApiFordconnectVehiclesV1, AxiosResponse<unknown>>, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiFordconnectVehiclesV1QueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getApiFordconnectVehiclesV1<TQueryFnData>(axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

