// @ts-nocheck
/*
 * Generated by orval v5.4.14 üç∫
 * Do not edit manually.
 * FordConnect Prod Collection V3.1.2
 * OpenAPI spec version: 1.0.0
 */
import axios, { AxiosRequestConfig, AxiosResponse } from "axios";
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from "react-query";

type AsyncReturnType<
  T extends (...args: any) => Promise<any>,
  U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;

export const postApiFordconnectVehiclesV1VehicleIdStatus = <
  TData = AxiosResponse<unknown>
>(
  vehicleId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/api/fordconnect/vehicles/v1/${vehicleId}/status`,
    undefined,
    options
  );
};

export const usePostApiFordconnectVehiclesV1VehicleIdStatus = <
  TData = AsyncReturnType<
    typeof postApiFordconnectVehiclesV1VehicleIdStatus,
    AxiosResponse<unknown>
  >,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { vehicleId: string }, TContext>;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options || {};

  return useMutation<TData, TError, { vehicleId: string }, TContext>(
    (props) => {
      const { vehicleId } = props || {};

      return postApiFordconnectVehiclesV1VehicleIdStatus<TData>(
        vehicleId,
        axiosOptions
      );
    },
    mutationOptions
  );
};
export const getApiFordconnectVehiclesV1VehicleId = <
  TData = AxiosResponse<unknown>
>(
  vehicleId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/api/fordconnect/vehicles/v1/${vehicleId}`, options);
};

export const getGetApiFordconnectVehiclesV1VehicleIdQueryKey = (
  vehicleId: string
) => [`/api/fordconnect/vehicles/v1/${vehicleId}`];

export const useGetApiFordconnectVehiclesV1VehicleId = <
  TQueryFnData = AsyncReturnType<
    typeof getApiFordconnectVehiclesV1VehicleId,
    AxiosResponse<unknown>
  >,
  TError = unknown,
  TData = TQueryFnData
>(
  vehicleId: string,
  options?: {
    query?: UseQueryOptions<TQueryFnData, TError, TData>;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiFordconnectVehiclesV1VehicleIdQueryKey(vehicleId);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      getApiFordconnectVehiclesV1VehicleId<TQueryFnData>(
        vehicleId,
        axiosOptions
      ),
    { enabled: !!vehicleId, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};
